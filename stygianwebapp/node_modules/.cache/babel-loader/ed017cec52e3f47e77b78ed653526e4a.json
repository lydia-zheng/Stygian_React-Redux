{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\OneDrive\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\src\\\\components\\\\MsgList.js\";\n//TODO EVERYTHING; template\nimport React, { Component, Fragment, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { initialize } from \"../actions\";\nexport default function MsgList() {\n  //state: {\n  //     \n  //}\n  const dispatch = useDispatch();\n  /*\r\n  useState should be used only inside functional components. useState is the way if we need an internal state and don't need to implement more complex logic such as lifecycle methods.\r\n    const [state, setState] = useState(initialState);\r\n  Returns a stateful value, and a function to update it.\r\n    During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\r\n    The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\r\n   */\n\n  const listItems = useSelector(state => state.messagesList); //TODO: MIGHT NOT BE STATE.MESSAGELIST\n\n  const [n, setN] = useState(); //debug\n\n  const [c, setC] = useState(); //debug\n\n  const [im, setIm] = useState();\n  const emptyMsg = {\n    name: n,\n    content: c\n  };\n  /* //callback function to dispatch the handleChange 'action' to our 'reducers'\r\n  //todo: memoize with useCallback ??\r\n  const initializeMessage = () => {\r\n      dispatch(initialize); \r\n   } */\n\n  /*cite: https://www.debuggr.io/react-map-of-undefined/ \r\n  undefined or null values are ignored inside JSX so it's safe to pass it on for first render\r\n  */\n\n  let msgsToRender;\n\n  if (im) {\n    msgsToRender = listItems.map((msg, i) => {\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"msg_send\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }, msg.name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, msg.content)))));\n    });\n  } else {\n    msgsToRender = \"Loading...\"; //TODO: FIX CURRENTLY ALWAYS UNDEFINED\n  } //TODO: get action to populate ul with lis\n\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"msg_list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, msgsToRender);\n}","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/components/MsgList.js"],"names":["React","Component","Fragment","useState","useSelector","useDispatch","initialize","MsgList","dispatch","listItems","state","messagesList","n","setN","c","setC","im","setIm","emptyMsg","name","content","msgsToRender","map","msg","i"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAC9B;AACA;AACA;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AAEA;;;;;;;;AAWA,QAAMI,SAAS,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,YAAhB,CAA7B,CAjB8B,CAiB8B;;AAC5D,QAAM,CAACC,CAAD,EAAIC,IAAJ,IAAYV,QAAQ,EAA1B,CAlB8B,CAkBA;;AAC9B,QAAM,CAACW,CAAD,EAAIC,IAAJ,IAAYZ,QAAQ,EAA1B,CAnB8B,CAmBA;;AAC9B,QAAM,CAACa,EAAD,EAAKC,KAAL,IAAcd,QAAQ,EAA5B;AAEA,QAAMe,QAAQ,GAAG;AACbC,IAAAA,IAAI,EAAEP,CADO;AAEbQ,IAAAA,OAAO,EAAEN;AAFI,GAAjB;AAKA;;;;;;AAMC;;;;AAGD,MAAIO,YAAJ;;AACA,MAAIL,EAAJ,EAAQ;AACJK,IAAAA,YAAY,GACXZ,SAAS,CAACa,GAAV,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AACvB,0BACI,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAGA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEY;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACR;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BD,GAAG,CAACJ,IAAnC,CADQ,eAER;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BI,GAAG,CAACH,OAAlC,CAFQ,CADA,CADA,CAFZ,CADJ;AAcH,KAfA,CADD;AAiBH,GAlBD,MAkBO;AACHC,IAAAA,YAAY,GAAG,YAAf,CADG,CAC0B;AAChC,GAzD6B,CA4D7B;;;AAED,sBAEA;AAAI,IAAA,SAAS,EAAE,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSA,YADT,CAFA;AAOH","sourcesContent":["//TODO EVERYTHING; template\r\nimport React, { Component, Fragment, useState } from 'react';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport {initialize} from \"../actions\"\r\n\r\nexport default function MsgList (){\r\n    //state: {\r\n    //     \r\n    //}\r\n    const dispatch = useDispatch();\r\n   \r\n    /*\r\n    useState should be used only inside functional components. useState is the way if we need an internal state and don't need to implement more complex logic such as lifecycle methods.\r\n\r\n    const [state, setState] = useState(initialState);\r\n    Returns a stateful value, and a function to update it.\r\n\r\n    During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\r\n\r\n    The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\r\n     */\r\n    \r\n    const listItems = useSelector(state => state.messagesList); //TODO: MIGHT NOT BE STATE.MESSAGELIST\r\n    const [n, setN] = useState(); //debug\r\n    const [c, setC] = useState(); //debug\r\n    const [im, setIm] = useState(); \r\n    \r\n    const emptyMsg = {\r\n        name: n,\r\n        content: c\r\n    }\r\n\r\n    /* //callback function to dispatch the handleChange 'action' to our 'reducers'\r\n    //todo: memoize with useCallback ??\r\n    const initializeMessage = () => {\r\n        dispatch(initialize); \r\n     } */\r\n\r\n     /*cite: https://www.debuggr.io/react-map-of-undefined/ \r\n     undefined or null values are ignored inside JSX so it's safe to pass it on for first render\r\n     */\r\n    let msgsToRender;\r\n    if (im) {\r\n        msgsToRender =\r\n         listItems.map((msg, i) => {\r\n            return (\r\n                <Fragment key= {i}>\r\n                    {\r\n                            <li className=\"msg_send\">\r\n                            <div className=\"msg\">\r\n                            <div className =\"msg_content\">\r\n                    <div className=\"msg_username\">{msg.name}</div>\r\n                    <div className=\"msg_message\">{msg.content}</div>\r\n                            </div>\r\n                            </div>\r\n                        </li>   \r\n                    }\r\n                </Fragment>\r\n            )\r\n        })\r\n    } else {\r\n        msgsToRender = \"Loading...\"; //TODO: FIX CURRENTLY ALWAYS UNDEFINED\r\n    }\r\n\r\n\r\n     //TODO: get action to populate ul with lis\r\n     \r\n    return( \r\n    \r\n    <ul className= \"msg_list\"> \r\n            {msgsToRender}\r\n    </ul> \r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}