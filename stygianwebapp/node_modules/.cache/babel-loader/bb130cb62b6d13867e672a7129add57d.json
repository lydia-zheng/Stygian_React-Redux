{"ast":null,"code":"import { combineReducers } from 'redux'; //**initial state constants**\n\nconst im = [{\n  name: \"Turtle\",\n  content: \"When did you change my username??\"\n}, {\n  name: \"Driz\",\n  content: \"Just now. Why?\"\n}, {\n  name: \"Turtle\",\n  content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n}, {\n  name: \"Driz\",\n  content: \"That we're all fictional? Yeah, no biggie.\"\n}];\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}; //**Reducers**\n\nconst messageReducer = (messageList = im, action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  if (action.type === 'ADD MESSAGES') {\n    return messageList; //TODO: do something with the form and message\n  }\n\n  return messageList; //TODO: might need to change messageList = im in parameter\n};\n\nconst formReducer = (f = initialForm, action) => {\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //submit\n      //TODO\n      break;\n\n    case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state\n      Object.assign({}, f, {\n        v1: action.value\n      }); //THIS NEEDS TO KEEP TRACK OF INPUT\n\n      break;\n    //TODO: add another handlechange for separate text input\n\n    case \"HANDLE_MSG\":\n      Object.assign({}, f, {\n        v2: action.value\n      });\n      break;\n\n    default:\n      return f;\n  }\n};\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  f: formReducer //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/reducers/index.js"],"names":["combineReducers","im","name","content","initialForm","v1","v2","messageReducer","messageList","action","type","formReducer","f","Object","assign","value"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B,C,CAEA;;AAEA,MAAMC,EAAE,GAAG,CACT;AACIC,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CADS,EAKT;AACID,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CALS,EAST;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CATS,EAaT;AACID,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CAbS,CAAX;AAmBA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,EADc;AAElBC,EAAAA,EAAE,EAAE;AAFc,CAApB,C,CAOA;;AAEA,MAAMC,cAAc,GAAG,CAAEC,WAAW,GAAGP,EAAhB,EAAoBQ,MAApB,KAA+B;AACnD;AACF,MAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AACnC,WAAOF,WAAP,CADmC,CACf;AACpB;;AACD,SAAOA,WAAP,CALqD,CAKjC;AACpB,CAND;;AAUA,MAAMG,WAAW,GAAG,CAAEC,CAAC,GAAGR,WAAN,EAAmBK,MAAnB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,eAAL;AACI;AACA;AAEF;;AACF,SAAK,aAAL;AACI;AACAG,MAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AAClBP,QAAAA,EAAE,EAAEI,MAAM,CAACM;AADO,OAApB,EAFJ,CAIS;;AACP;AACA;;AACF,SAAK,YAAL;AACEF,MAAAA,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AAClBN,QAAAA,EAAE,EAAEG,MAAM,CAACM;AADO,OAApB;AAGA;;AAEA;AAAS,aAAOH,CAAP;AAnBZ;AAsBA,CAvBD;;AAyBA,eAAeZ,eAAe,CAAC;AAC7B;AACAQ,EAAAA,WAAW,EAAED,cAFgB;AAG7BK,EAAAA,CAAC,EAAED,WAH0B,CAK/B;;AAL+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n//**initial state constants**\n\nconst im = [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\"\n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\"\n  }\n];\n\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}\n\n\n\n//**Reducers**\n\nconst messageReducer = ( messageList = im, action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n\tif (action.type === 'ADD MESSAGES') {\n\t\treturn messageList; //TODO: do something with the form and message\n\t}\n\treturn messageList; //TODO: might need to change messageList = im in parameter\n};\n\n\n\nconst formReducer = ( f = initialForm, action) => {\n switch (action.type){\n  case \"HANDLE_SUBMIT\":\n      //submit\n      //TODO\n\n    break;\n  case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state\n      Object.assign({},f, {\n        v1: action.value\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\n    break;\n    //TODO: add another handlechange for separate text input\n  case \"HANDLE_MSG\":\n    Object.assign({},f, {\n      v2: action.value\n    }); \n    break;\n    \n    default: return f; \n }\n \n};\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  f: formReducer\n \n//anotherKey: anotherReducer //all your reducers should be combined\n});\n\n"]},"metadata":{},"sourceType":"module"}