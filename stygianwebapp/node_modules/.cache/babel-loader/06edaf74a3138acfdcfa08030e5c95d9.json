{"ast":null,"code":"import { combineReducers } from 'redux'; //**initial state constants**\n\nconst im = {\n  messages: [{\n    name: \"Turtle\",\n    content: \"When did you change my username??\",\n    date: \"06/03/2020, 06:06:06 PM\"\n  }, {\n    name: \"Driz\",\n    content: \"Just now. Why?\",\n    date: \"06/04/2020, 00:01:23 AM\"\n  }, {\n    name: \"Turtle\",\n    content: \"Urg. Nevermind that, did you hear about the news? Apparently..\",\n    date: \"06/04/2020, 00:03:45 AM\"\n  }, {\n    name: \"Driz\",\n    content: \"That we're all fictional? Yeah, no biggie.\",\n    date: \"06/05/2020, 00:10:21 AM\"\n  }]\n};\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}; //**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg] //spread attribute : ...\n\n      };\n\n    case \"GET_DELETE\":\n      return {\n        //return the filtered message list that's not the deleted id\n        messages: messages.messages.filter((m, i) => i !== action.id)\n      };\n\n    default:\n      return messages;\n    //returns object of array of messages\n  }\n\n  ;\n};\n\nconst formReducer = (f = initialForm, action) => {\n  switch (action.type) {\n    case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({}, f, {\n        v1: action.value\n      });\n    //THIS NEEDS TO KEEP TRACK OF INPUT\n\n    case \"HANDLE_MSG\":\n      return Object.assign({}, f, {\n        v2: action.value\n      });\n\n    default:\n      return f;\n  }\n};\n\nconst detailsReducer = (id = null, action) => {\n  switch (action.type) {\n    //grab the index of the active message to display modal for\n    case \"GET_ACTIVE_MSG\":\n      return id = action.id;\n\n    default:\n      return id;\n  }\n};\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer,\n  id: detailsReducer //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/Documents/UBC/CPSC436I/assignment_2/stygianwebapp/src/reducers/index.js"],"names":["combineReducers","im","messages","name","content","date","initialForm","v1","v2","messageReducer","action","type","newMsg","filter","m","i","id","formReducer","f","Object","assign","value","detailsReducer"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B,C,CAEA;;AAEA,MAAMC,EAAE,GAAG;AACRC,EAAAA,QAAQ,EAAE,CACX;AACIC,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE,mCAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GADW,EAOX;AACIF,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE,gBAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GAPW,EAYX;AACIF,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE,gEAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GAZW,EAiBX;AACIF,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE,4CAFb;AAGIC,IAAAA,IAAI,EAAE;AAHV,GAjBW;AADF,CAAX;AA2BA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,EADc;AAElBC,EAAAA,EAAE,EAAE;AAFc,CAApB,C,CAQA;;AAEA,MAAMC,cAAc,GAAG,CAACP,QAAQ,GAAGD,EAAZ,EAAgBS,MAAhB,KAA2B;AAC/C;AACA,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAK,eAAL;AACE;AACD,aAAO;AACL;AACAT,QAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAQ,CAACA,QAAb,EAAuBQ,MAAM,CAACE,MAA9B,CAFL,CAE4C;;AAF5C,OAAP;;AAKD,SAAK,YAAL;AACE,aAAO;AACL;AACAV,QAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAAT,CAAkBW,MAAlB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAIL,MAAM,CAACM,EAA/C;AAFL,OAAP;;AAMF;AAAS,aAAOd,QAAP;AAAiB;AAjB5B;;AAkBE;AACJ,CArBD;;AAyBA,MAAMe,WAAW,GAAG,CAAEC,CAAC,GAAGZ,WAAN,EAAmBI,MAAnB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AAEC,SAAK,aAAL;AACI;AACA,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACzBX,QAAAA,EAAE,EAAEG,MAAM,CAACW;AADc,OAApB,CAAP;AAEK;;AAGT,SAAK,YAAL;AACG,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACxBV,QAAAA,EAAE,EAAEE,MAAM,CAACW;AADa,OAApB,CAAP;;AAID;AAAS,aAAOH,CAAP;AAdZ;AAiBA,CAlBD;;AAoBC,MAAMI,cAAc,GAAG,CAACN,EAAE,GAAE,IAAL,EAAWN,MAAX,KAAsB;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAK,gBAAL;AAEE,aAAOK,EAAE,GAAGN,MAAM,CAACM,EAAnB;;AAEF;AAAS,aAAOA,EAAP;AANX;AAQD,CATA;;AAaD,eAAehB,eAAe,CAAC;AAC7B;AACAE,EAAAA,QAAQ,EAAEO,cAFmB;AAG7BS,EAAAA,CAAC,EAAED,WAH0B;AAI7BD,EAAAA,EAAE,EAAEM,cAJyB,CAO/B;;AAP+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n//**initial state constants**\n\nconst im = {\n   messages: [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\",\n      date: \"06/03/2020, 06:06:06 PM\"\n      \n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\",\n      date: \"06/04/2020, 00:01:23 AM\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\",\n      date: \"06/04/2020, 00:03:45 AM\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\",\n      date: \"06/05/2020, 00:10:21 AM\"\n  }\n]\n\n}\n \nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}\n\n\n\n\n//**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n   switch (action.type)\n   {\n\n     case \"HANDLE_SUBMIT\":\n       //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg], //spread attribute : ...\n      }\n\n     case \"GET_DELETE\":\n       return {\n         //return the filtered message list that's not the deleted id\n         messages: messages.messages.filter((m, i) => i!== action.id),\n       }\n\n\n     default: return messages; //returns object of array of messages\n    }; \n};\n\n\n\nconst formReducer = ( f = initialForm, action) => {\n switch (action.type){\n    \n  case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({},f, {\n        v1: action.value\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\n    \n    \n  case \"HANDLE_MSG\":\n     return Object.assign({},f, {\n        v2: action.value\n      }); \n    \n    default: return f; \n }\n \n};\n\n const detailsReducer = (id= null, action) => {\n  switch (action.type){\n    //grab the index of the active message to display modal for\n    case \"GET_ACTIVE_MSG\":\n      \n      return id = action.id;\n\n    default: return id;\n  }\n}; \n\n\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer,\n  id: detailsReducer\n\n \n//anotherKey: anotherReducer //all your reducers should be combined\n}\n);\n\n"]},"metadata":{},"sourceType":"module"}