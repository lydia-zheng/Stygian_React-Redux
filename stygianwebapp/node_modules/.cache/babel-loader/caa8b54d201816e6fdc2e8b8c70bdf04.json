{"ast":null,"code":"import { combineReducers } from 'redux'; //**initial state constants**\n\nconst im = {\n  messages: [{\n    name: \"Turtle\",\n    content: \"When did you change my username??\"\n  }, {\n    name: \"Driz\",\n    content: \"Just now. Why?\"\n  }, {\n    name: \"Turtle\",\n    content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  }, {\n    name: \"Driz\",\n    content: \"That we're all fictional? Yeah, no biggie.\"\n  }]\n};\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n};\nconst isShowing = false;\nconst i = 0; //**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg]\n      };\n\n    case \"HANDLE_TOGGLE\":\n      return {\n        isShowing: !action.isShowing,\n        //makes it opposite of what it was\n        messages: action.messages.messages,\n        i: action.i\n      };\n\n    default:\n      return messages;\n  }\n\n  ;\n};\n\nconst formReducer = (f = initialForm, action) => {\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //submit\n      //TODO: add additional returned info or just comment out this case\n      return f;\n\n    case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({}, f, {\n        v1: action.value\n      });\n    //THIS NEEDS TO KEEP TRACK OF INPUT\n\n    case \"HANDLE_MSG\":\n      return Object.assign({}, f, {\n        v2: action.value\n      });\n\n    default:\n      return f;\n  }\n};\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/reducers/index.js"],"names":["combineReducers","im","messages","name","content","initialForm","v1","v2","isShowing","i","messageReducer","action","type","newMsg","formReducer","f","Object","assign","value"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B,C,CAEA;;AAEA,MAAMC,EAAE,GAAG;AACRC,EAAAA,QAAQ,EAAE,CACX;AACIC,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADW,EAKX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GALW,EASX;AACID,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GATW,EAaX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAbW;AADF,CAAX;AAsBA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,EADc;AAElBC,EAAAA,EAAE,EAAE;AAFc,CAApB;AAKA,MAAMC,SAAS,GAAG,KAAlB;AACA,MAAMC,CAAC,GAAG,CAAV,C,CAEA;;AAEA,MAAMC,cAAc,GAAG,CAACR,QAAQ,GAAGD,EAAZ,EAAgBU,MAAhB,KAA2B;AAC/C;AACA,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAK,eAAL;AACE;AACD,aAAO;AACL;AACAV,QAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAQ,CAACA,QAAb,EAAuBS,MAAM,CAACE,MAA9B;AAFL,OAAP;;AAKA,SAAK,eAAL;AACE,aAAO;AACLL,QAAAA,SAAS,EAAE,CAACG,MAAM,CAACH,SADd;AACyB;AAC9BN,QAAAA,QAAQ,EAAES,MAAM,CAACT,QAAP,CAAgBA,QAFrB;AAGLO,QAAAA,CAAC,EAAEE,MAAM,CAACF;AAHL,OAAP;;AAOH;AAAS,aAAOP,QAAP;AAlBX;;AAmBE;AACJ,CAtBD;;AA0BA,MAAMY,WAAW,GAAG,CAAEC,CAAC,GAAGV,WAAN,EAAmBM,MAAnB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,eAAL;AACI;AACA;AACA,aAAOG,CAAP;;AAKJ,SAAK,aAAL;AACI;AACA,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACzBT,QAAAA,EAAE,EAAEK,MAAM,CAACO;AADc,OAApB,CAAP;AAEK;;AAGT,SAAK,YAAL;AACG,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACxBR,QAAAA,EAAE,EAAEI,MAAM,CAACO;AADa,OAApB,CAAP;;AAID;AAAS,aAAOH,CAAP;AArBZ;AAwBA,CAzBD;;AA2BA,eAAef,eAAe,CAAC;AAC7B;AACAE,EAAAA,QAAQ,EAAEQ,cAFmB;AAG7BK,EAAAA,CAAC,EAAED,WAH0B,CAK/B;;AAL+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n//**initial state constants**\n\nconst im = {\n   messages: [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\"\n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\"\n  }\n]\n\n}\n \nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}\n\nconst isShowing = false;\nconst i = 0;\n\n//**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n   switch (action.type)\n   {\n\n     case \"HANDLE_SUBMIT\":\n       //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg],\n      }\n\n      case \"HANDLE_TOGGLE\":\n        return {\n          isShowing: !action.isShowing, //makes it opposite of what it was\n          messages: action.messages.messages,\n          i: action.i\n        }\n\n\n     default: return messages;\n    }; \n};\n\n\n\nconst formReducer = ( f = initialForm, action) => {\n switch (action.type){\n  case \"HANDLE_SUBMIT\":\n      //submit\n      //TODO: add additional returned info or just comment out this case\n      return f;\n     \n\n\n    \n  case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({},f, {\n        v1: action.value\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\n    \n    \n  case \"HANDLE_MSG\":\n     return Object.assign({},f, {\n        v2: action.value\n      }); \n    \n    default: return f; \n }\n \n};\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer\n \n//anotherKey: anotherReducer //all your reducers should be combined\n});\n\n"]},"metadata":{},"sourceType":"module"}