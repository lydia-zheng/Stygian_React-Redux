{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\OneDrive\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\src\\\\components\\\\DetailView.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport MsgList from './MsgList'; //citing:https://upmostly.com/tutorials/modal-components-react-custom-hooks\n//A stateless functional component that takes two props and only returns HTML when isShowing is true.\n// Portals allow React components to render in another part of the DOM that is outside of their parent component.\n//we can use a Portal to mount our Modal component to the end of the document.body element\n// **modal component doesn’t actually handle it’s own state.** It's parent does\n//2 arguments for the createPortal function: \n//1)the modal component we want to render \n//2)the location of where we want to append the component.\n\n/* const DetailView = ({isShowing, hide, index}) => isShowing? ReactDOM.createPortal(\r\n    <React.Fragment>\r\n        <div className=\"modal-overlay\"/>\r\n            <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-header\">\r\n                    <button type=\"button\" className=\"modal-close-button\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hide}>\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    </div>\r\n                    <p>\r\n                        message index is: {index}\r\n                    </p>\r\n        </div>\r\n    </div>\r\n  </React.Fragment>, document.body\r\n) : null;\r\n   \r\nexport default DetailView */\n\nexport default function DetailView() {\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/components/DetailView.js"],"names":["React","ReactDOM","MsgList","DetailView"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;AACA;AACA;AAGA;AAEA;AACQ;AACA;;AAGR;;;;;;;;;;;;;;;;;;;;AAoBA,eAAe,SAASC,UAAT,GAAsB;AACjC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MsgList from './MsgList';\r\n\r\n//citing:https://upmostly.com/tutorials/modal-components-react-custom-hooks\r\n//A stateless functional component that takes two props and only returns HTML when isShowing is true.\r\n// Portals allow React components to render in another part of the DOM that is outside of their parent component.\r\n//we can use a Portal to mount our Modal component to the end of the document.body element\r\n\r\n\r\n// **modal component doesn’t actually handle it’s own state.** It's parent does\r\n\r\n//2 arguments for the createPortal function: \r\n        //1)the modal component we want to render \r\n        //2)the location of where we want to append the component.\r\n\r\n\r\n/* const DetailView = ({isShowing, hide, index}) => isShowing? ReactDOM.createPortal(\r\n    <React.Fragment>\r\n        <div className=\"modal-overlay\"/>\r\n            <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal\">\r\n                    <div className=\"modal-header\">\r\n                    <button type=\"button\" className=\"modal-close-button\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hide}>\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    </div>\r\n                    <p>\r\n                        message index is: {index}\r\n                    </p>\r\n        </div>\r\n    </div>\r\n  </React.Fragment>, document.body\r\n) : null;\r\n   \r\nexport default DetailView */\r\n\r\nexport default function DetailView (){\r\n    return (\r\n        <h1></h1>\r\n    );\r\n}\r\n\r\n "]},"metadata":{},"sourceType":"module"}