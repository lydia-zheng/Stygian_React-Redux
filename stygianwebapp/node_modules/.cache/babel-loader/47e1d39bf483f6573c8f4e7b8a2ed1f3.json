{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\OneDrive\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\src\\\\components\\\\UserForm.js\";\nimport React from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { handleUser, handleMsg, handleSubmit } from '../actions';\nexport default function UserForm() {\n  //useDispatch is a function from react-redux that returns the function to dispatch 'actions' to 'reducers'\n  //works similarily to mapDispatchToProps\n  const dispatch = useDispatch(); //useSelector is a function from react-redux that returns the part of the global state you want (or the gobal state but this should never be done)\n  //remember global state struction structure currently looks like this:\n  //state: {\n  //  value    \n  //}\n\n  const value = useSelector(state => state.value); //callback function to dispatch the handleChange 'action' to our 'reducers'\n  //todo: memoize with useCallback ??\n\n  const handle_User = e => {\n    dispatch(handleUser(e.target.value));\n  };\n\n  const handle_Msg = e => {\n    dispatch(handleMsg(e.target.value));\n  };\n\n  const handle_Submit = e => {\n    dispatch(handleSubmit());\n  }; //TODO: implement handleSubmit\n  //maybe replace submit button to general button component type\n  //TODO: write separate handleChange function for message(CURRENTLY DISPLAYS THE SAME FOR BOTH USERNAME AND MESSAGE)\n  // CHANGE TO HANDLE NAME AND HANDLE TEXT\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handle_Submit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Username:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    value: value,\n    onChange: e => handle_User(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Enter Your Message:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"msg\",\n    type: \"text\",\n    value: value,\n    onChange: e => handle_Msg(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/components/UserForm.js"],"names":["React","connect","useSelector","useDispatch","handleUser","handleMsg","handleSubmit","UserForm","dispatch","value","state","handle_User","e","target","handle_Msg","handle_Submit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,YAApD;AAGA,eAAe,SAASC,QAAT,GAAqB;AAChC;AACA;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAHgC,CAKhC;AACA;AACA;AACA;AACA;;AACA,QAAMM,KAAK,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB,CAVgC,CAYhC;AACA;;AACA,QAAME,WAAW,GAAIC,CAAD,IAAO;AACvBJ,IAAAA,QAAQ,CAACJ,UAAU,CAACQ,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAX,CAAR;AACF,GAFF;;AAIA,QAAMK,UAAU,GAAIF,CAAD,IAAO;AACtBJ,IAAAA,QAAQ,CAACH,SAAS,CAACO,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAV,CAAR;AACH,GAFD;;AAIA,QAAMM,aAAa,GAAIH,CAAD,IAAQ;AAC1BJ,IAAAA,QAAQ,CAACF,YAAY,EAAb,CAAR;AACH,GAFD,CAtBgC,CA4B/B;AACE;AACA;AACA;;;AACA,sBAAO;AAAM,IAAA,QAAQ,EAAIM,CAAD,IAAOG,aAAa,CAACH,CAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEI;AAAO,IAAA,EAAE,EAAE,MAAX;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAEH,KAArC;AAA4C,IAAA,QAAQ,EAAGG,CAAD,IAAOD,WAAW,CAACC,CAAD,CAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADM,eAKN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAEI;AAAO,IAAA,EAAE,EAAC,KAAV;AAAgB,IAAA,IAAI,EAAC,MAArB;AAA4B,IAAA,KAAK,EAAEH,KAAnC;AAA0C,IAAA,QAAQ,EAAGG,CAAD,IAAOE,UAAU,CAACF,CAAD,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CALM,eASF;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATE,CAAP;AAaN","sourcesContent":["import React from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { handleUser, handleMsg, handleSubmit } from '../actions';\r\n\r\n\r\nexport default function UserForm () {\r\n    //useDispatch is a function from react-redux that returns the function to dispatch 'actions' to 'reducers'\r\n    //works similarily to mapDispatchToProps\r\n    const dispatch = useDispatch();\r\n\r\n    //useSelector is a function from react-redux that returns the part of the global state you want (or the gobal state but this should never be done)\r\n    //remember global state struction structure currently looks like this:\r\n    //state: {\r\n    //  value    \r\n    //}\r\n    const value = useSelector(state => state.value);\r\n\r\n    //callback function to dispatch the handleChange 'action' to our 'reducers'\r\n    //todo: memoize with useCallback ??\r\n    const handle_User = (e) => {\r\n        dispatch(handleUser(e.target.value));\r\n     }\r\n\r\n    const handle_Msg = (e) => {\r\n        dispatch(handleMsg(e.target.value));\r\n    }\r\n\r\n    const handle_Submit = (e) =>  {\r\n        dispatch(handleSubmit());\r\n    }\r\n\r\n\r\n\r\n     //TODO: implement handleSubmit\r\n       //maybe replace submit button to general button component type\r\n       //TODO: write separate handleChange function for message(CURRENTLY DISPLAYS THE SAME FOR BOTH USERNAME AND MESSAGE)\r\n       // CHANGE TO HANDLE NAME AND HANDLE TEXT\r\n       return(<form onSubmit= {(e) => handle_Submit(e)}>\r\n        <label>\r\n            Username:\r\n            <input id =\"name\" type=\"text\" value={value} onChange={(e) => handle_User(e)}/>\r\n        </label>\r\n        <label>\r\n            Enter Your Message:\r\n            <input id=\"msg\" type=\"text\" value={value} onChange={(e) => handle_Msg(e)}/>\r\n        </label>\r\n            <input type=\"submit\" value=\"Submit\"></input> \r\n    </form>\r\n       );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}