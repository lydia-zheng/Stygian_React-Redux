{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\stygianwebapp\\\\src\\\\components\\\\DetailView.js\";\nimport React from 'react'; //import ReactDOM from 'react-dom';\n//import MsgList from './MsgList';\n\nimport { useSelector } from 'react-redux';\nimport useModal from './useModal'; //citing:https://upmostly.com/tutorials/modal-components-react-custom-hooks\n//A stateless functional component that takes two props and only returns HTML when isShowing is true.\n// Portals allow React components to render in another part of the DOM that is outside of their parent component.\n//we can use a Portal to mount our Modal component to the end of the document.body element\n// **modal component doesn’t actually handle it’s own state.** It's parent does\n//2 arguments for the createPortal function: \n//1)the modal component we want to render \n//2)the location of where we want to append the component.\n\nexport default function DetailView() {\n  const hide = useModal.hide;\n  const activeMsgID = useSelector(state => state.id);\n  const msgList = useSelector(state => state.messages.messages);\n  let name = \"N/A\";\n  let content = \"N/A\";\n  let date = \"N/A\"; //console.log(\"activeMsgID:\", activeMsgID);\n\n  if (activeMsgID || activeMsgID === 0) {\n    //console.log(\"insideActiveMsg\");\n    name = msgList[activeMsgID].name;\n    content = msgList[activeMsgID].content;\n    date = msgList[activeMsgID].date;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"detailedView\",\n    className: \"popup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"popup_inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"Detailed View \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"message index is: \", activeMsgID, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 48\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 53\n    }\n  }), \"username: \", name, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 34\n    }\n  }), \"content: \", content, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 31\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }\n  }), \"date: \", date, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 31\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/lydia/Documents/UBC/CPSC436I/assignment_2/stygianwebapp/src/components/DetailView.js"],"names":["React","useSelector","useModal","DetailView","hide","activeMsgID","state","id","msgList","messages","name","content","date"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;AACA;AACA;AACA;AAGA;AAEA;AACQ;AACA;;AAIR,eAAe,SAASC,UAAT,GAAsB;AACjC,QAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAtB;AAEA,QAAMC,WAAW,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,EAAhB,CAA/B;AACA,QAAMC,OAAO,GAAGP,WAAW,CAACK,KAAK,IAAGA,KAAK,CAACG,QAAN,CAAeA,QAAxB,CAA3B;AACA,MAAIC,IAAI,GAAG,KAAX;AACA,MAAIC,OAAO,GAAI,KAAf;AACA,MAAIC,IAAI,GAAG,KAAX,CAPiC,CASjC;;AAGA,MAAIP,WAAW,IAAIA,WAAW,KAAK,CAAnC,EAAqC;AACjC;AAEAK,IAAAA,IAAI,GAAGF,OAAO,CAACH,WAAD,CAAP,CAAqBK,IAA5B;AACAC,IAAAA,OAAO,GAAGH,OAAO,CAACH,WAAD,CAAP,CAAqBM,OAA/B;AACAC,IAAAA,IAAI,GAAGJ,OAAO,CAACH,WAAD,CAAP,CAAqBO,IAA5B;AACH;;AAED,sBAEI;AAAK,IAAA,EAAE,EAAE,cAAT;AAAwB,IAAA,SAAS,EAAC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAsBP,WAAtB,oBAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,eAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxC,gBACWK,IADX,eACgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhB,eACqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADrB,eAEUC,OAFV,eAEkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlB,eAEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFvB,YAGOC,IAHP,oBAGa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHb,eAGkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHlB,CAFA,CADJ,CAFJ;AAgBH","sourcesContent":["import React from 'react';\r\n//import ReactDOM from 'react-dom';\r\n//import MsgList from './MsgList';\r\nimport { useSelector } from 'react-redux';\r\nimport useModal from './useModal';\r\n\r\n//citing:https://upmostly.com/tutorials/modal-components-react-custom-hooks\r\n//A stateless functional component that takes two props and only returns HTML when isShowing is true.\r\n// Portals allow React components to render in another part of the DOM that is outside of their parent component.\r\n//we can use a Portal to mount our Modal component to the end of the document.body element\r\n\r\n\r\n// **modal component doesn’t actually handle it’s own state.** It's parent does\r\n\r\n//2 arguments for the createPortal function: \r\n        //1)the modal component we want to render \r\n        //2)the location of where we want to append the component.\r\n\r\n\r\n\r\nexport default function DetailView (){\r\n    const hide = useModal.hide;\r\n\r\n    const activeMsgID = useSelector(state => state.id);\r\n    const msgList = useSelector(state =>state.messages.messages);\r\n    let name = \"N/A\";\r\n    let content  = \"N/A\";\r\n    let date = \"N/A\";\r\n    \r\n    //console.log(\"activeMsgID:\", activeMsgID);\r\n    \r\n    \r\n    if (activeMsgID || activeMsgID === 0){\r\n        //console.log(\"insideActiveMsg\");\r\n        \r\n        name = msgList[activeMsgID].name;\r\n        content = msgList[activeMsgID].content;\r\n        date = msgList[activeMsgID].date;\r\n    }\r\n\r\n    return (\r\n        \r\n        <div id= \"detailedView\" className='popup'>\r\n            <div className=\"popup_inner\">\r\n                <h1>Detailed View </h1>\r\n            <p>message index is: {activeMsgID} <br/><br/>\r\n            username: {name}<br/><br/>\r\n            content: {content}<br/><br/>\r\n            date: {date} <br/><br/>\r\n            </p>\r\n            \r\n            </div>\r\n            \r\n\r\n        </div>   \r\n    );\r\n}\r\n\r\n\r\n\r\n    \r\n"]},"metadata":{},"sourceType":"module"}