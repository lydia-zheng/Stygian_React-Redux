{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\OneDrive\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\src\\\\components\\\\UserForm.js\";\nimport { React, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; //connect used in old version\n\nimport { handleUser, handleMsg, handleSubmit } from '../actions';\nexport default function UserForm() {\n  //useDispatch is a function from react-redux that returns the function to dispatch 'actions' to 'reducers'\n  //works similarily to mapDispatchToProps\n  const dispatch = useDispatch(); //useSelector is a function from react-redux that returns the part of the global state you want (or the gobal state but this should never be done)\n  //remember global state struction structure currently looks like this:\n  //state: {\n  //  value    \n  //}\n  //TODO: state.value figure out\n\n  const value = useSelector(state => state.value);\n  const [newName, setNewName] = useState();\n  const [newC, setNewC] = useState(); //callback function to dispatch the handleChange 'action' to our 'reducers'\n  //todo: memoize with useCallback ??\n\n  const handle_User = e => {\n    dispatch(handleUser(e.target.name, e.target.value));\n  };\n\n  const handle_Msg = e => {\n    dispatch(handleMsg(e.target.name, e.target.value));\n  }; //TODO: implement handleSubmit AND CONNECT WITH ACTION AND SUCH; \n  //REMEMBER TO PREVENT DEFAULT\n\n\n  const handle_Submit = e => {\n    //function: added new Msg\n    e.preventDefault(); //empty default state (undefined) msg\n\n    const addedMsg = {\n      name: newName,\n      content: newC\n    };\n\n    if (addedMsg.name && addedMsg.content) {\n      dispatch(handleSubmit(addedMsg));\n      setNewName(\"\"); //clear out past input\n\n      setNewC(\"\"); //clear out past input by reseting with new state\n    }\n  }; //maybe replace submit button to general button component type\n  //sets the new filled out states for newMsg to be added\n\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handle_Submit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Username:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"name\",\n    type: \"text\",\n    value: value,\n    onChange: (e => handle_User(e), e => setNewName(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Enter Your Message:\", /*#__PURE__*/React.createElement(\"input\", {\n    id: \"msg\",\n    type: \"text\",\n    value: value,\n    onChange: (e => handle_Msg(e), e => setNewC(e.target.value)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/components/UserForm.js"],"names":["React","useState","useSelector","useDispatch","handleUser","handleMsg","handleSubmit","UserForm","dispatch","value","state","newName","setNewName","newC","setNewC","handle_User","e","target","name","handle_Msg","handle_Submit","preventDefault","addedMsg","content"],"mappings":";AAAA,SAAQA,KAAR,EAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAwC,aAAxC,C,CAAuD;;AACvD,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,YAApD;AAGA,eAAe,SAASC,QAAT,GAAqB;AAChC;AACA;AACA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CAHgC,CAKhC;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMM,KAAK,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACD,KAAhB,CAAzB;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,EAAtC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC,CAdgC,CAiBhC;AACA;;AACA,QAAMc,WAAW,GAAIC,CAAD,IAAO;AACvBR,IAAAA,QAAQ,CAACJ,UAAU,CAACY,CAAC,CAACC,MAAF,CAASC,IAAV,EAAgBF,CAAC,CAACC,MAAF,CAASR,KAAzB,CAAX,CAAR;AACF,GAFF;;AAIA,QAAMU,UAAU,GAAIH,CAAD,IAAO;AACtBR,IAAAA,QAAQ,CAACH,SAAS,CAACW,CAAC,CAACC,MAAF,CAASC,IAAV,EAAgBF,CAAC,CAACC,MAAF,CAASR,KAAzB,CAAV,CAAR;AACH,GAFD,CAvBgC,CA4BhC;AACA;;;AACA,QAAMW,aAAa,GAAIJ,CAAD,IAAQ;AAC1B;AACAA,IAAAA,CAAC,CAACK,cAAF,GAF0B,CAI1B;;AACA,UAAMC,QAAQ,GAAG;AACbJ,MAAAA,IAAI,EAAEP,OADO;AAEbY,MAAAA,OAAO,EAAEV;AAFI,KAAjB;;AAKA,QAAIS,QAAQ,CAACJ,IAAT,IAAiBI,QAAQ,CAACC,OAA9B,EAAsC;AAClCf,MAAAA,QAAQ,CAACF,YAAY,CAACgB,QAAD,CAAb,CAAR;AACAV,MAAAA,UAAU,CAAC,EAAD,CAAV,CAFkC,CAElB;;AAChBE,MAAAA,OAAO,CAAC,EAAD,CAAP,CAHkC,CAGrB;AAChB;AACJ,GAfD,CA9BgC,CAkD7B;AAEA;;;AACA,sBAAO;AAAM,IAAA,QAAQ,EAAIE,CAAD,IAAOI,aAAa,CAACJ,CAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEI;AAAO,IAAA,EAAE,EAAE,MAAX;AAAkB,IAAA,IAAI,EAAC,MAAvB;AAA8B,IAAA,KAAK,EAAEP,KAArC;AAA4C,IAAA,QAAQ,GAAGO,CAAD,IAAOD,WAAW,CAACC,CAAD,CAAlB,EAAwBA,CAAD,IAAOJ,UAAU,CAACI,CAAC,CAACC,MAAF,CAASR,KAAV,CAA1C,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADM,eAKN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAEI;AAAO,IAAA,EAAE,EAAC,KAAV;AAAgB,IAAA,IAAI,EAAC,MAArB;AAA4B,IAAA,KAAK,EAAEA,KAAnC;AAA0C,IAAA,QAAQ,GAAGO,CAAD,IAAOG,UAAU,CAACH,CAAD,CAAjB,EAAuBA,CAAD,IAAOF,OAAO,CAACE,CAAC,CAACC,MAAF,CAASR,KAAV,CAAtC,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CALM,eASF;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATE,CAAP;AAaN","sourcesContent":["import {React, useState} from 'react';\r\nimport {useSelector, useDispatch } from 'react-redux'; //connect used in old version\r\nimport { handleUser, handleMsg, handleSubmit } from '../actions';\r\n\r\n\r\nexport default function UserForm () {\r\n    //useDispatch is a function from react-redux that returns the function to dispatch 'actions' to 'reducers'\r\n    //works similarily to mapDispatchToProps\r\n    const dispatch = useDispatch();\r\n\r\n    //useSelector is a function from react-redux that returns the part of the global state you want (or the gobal state but this should never be done)\r\n    //remember global state struction structure currently looks like this:\r\n    //state: {\r\n    //  value    \r\n    //}\r\n    //TODO: state.value figure out\r\n    const value = useSelector(state => state.value);\r\n\r\n    const [newName, setNewName] = useState ();\r\n    const [newC, setNewC] = useState ();\r\n\r\n\r\n    //callback function to dispatch the handleChange 'action' to our 'reducers'\r\n    //todo: memoize with useCallback ??\r\n    const handle_User = (e) => {\r\n        dispatch(handleUser(e.target.name, e.target.value));\r\n     }\r\n\r\n    const handle_Msg = (e) => {\r\n        dispatch(handleMsg(e.target.name, e.target.value));\r\n    }\r\n\r\n    \r\n    //TODO: implement handleSubmit AND CONNECT WITH ACTION AND SUCH; \r\n    //REMEMBER TO PREVENT DEFAULT\r\n    const handle_Submit = (e) =>  {\r\n        //function: added new Msg\r\n        e.preventDefault();\r\n\r\n        //empty default state (undefined) msg\r\n        const addedMsg = {\r\n            name: newName,\r\n            content: newC\r\n        }\r\n        \r\n        if (addedMsg.name && addedMsg.content){\r\n            dispatch(handleSubmit(addedMsg));\r\n            setNewName(\"\"); //clear out past input\r\n            setNewC(\"\"); //clear out past input by reseting with new state\r\n        }   \r\n    }\r\n\r\n\r\n\r\n     \r\n       //maybe replace submit button to general button component type\r\n       \r\n       //sets the new filled out states for newMsg to be added\r\n       return(<form onSubmit= {(e) => handle_Submit(e)}>\r\n        <label>\r\n            Username:\r\n            <input id =\"name\" type=\"text\" value={value} onChange={(e) => handle_User(e), (e) => setNewName(e.target.value)}/>\r\n        </label>\r\n        <label>\r\n            Enter Your Message:\r\n            <input id=\"msg\" type=\"text\" value={value} onChange={(e) => handle_Msg(e), (e) => setNewC(e.target.value)}/>\r\n        </label>\r\n            <input type=\"submit\" value=\"Submit\"></input> \r\n    </form>\r\n       );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}