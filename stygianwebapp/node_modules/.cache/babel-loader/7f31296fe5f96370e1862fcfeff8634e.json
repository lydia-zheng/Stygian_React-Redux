{"ast":null,"code":"import { combineReducers } from 'redux'; //**initial state constants**\n\nconst im = {\n  messages: [{\n    name: \"Turtle\",\n    content: \"When did you change my username??\"\n  }, {\n    name: \"Driz\",\n    content: \"Just now. Why?\"\n  }, {\n    name: \"Turtle\",\n    content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  }, {\n    name: \"Driz\",\n    content: \"That we're all fictional? Yeah, no biggie.\"\n  }]\n};\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n};\nconst m = {\n  //isShowing: false,\n  index: 0\n}; //**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg] //spread attribute : ...\n\n      };\n\n    /* case \"HANDLE_TOGGLE\":\n      const isShowing = false;\n      const i = 0;\n      return {\n        isShowing: !action.isShowing, //makes it opposite of what it was\n        messages: action.messages.messages,\n        i: action.i\n      } */\n\n    default:\n      return messages;\n    //returns object of array of messages\n  }\n\n  ;\n};\n\nconst formReducer = (f = initialForm, action) => {\n  switch (action.type) {\n    case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({}, f, {\n        v1: action.value\n      });\n    //THIS NEEDS TO KEEP TRACK OF INPUT\n\n    case \"HANDLE_MSG\":\n      return Object.assign({}, f, {\n        v2: action.value\n      });\n\n    default:\n      return f;\n  }\n};\n\nconst detailsReducer = (modalInfo = m, action) => {\n  switch (action.type) {\n    //grab the index of the active message to display modal for\n    case \"HANDLE_TOGGLE\":\n      return Object.assign({}, modalInfo, {\n        //isShowing: !action.isShowing, //might need to debug\n        index: action.index\n      });\n\n    default:\n      return modalInfo;\n  }\n};\n/* const defaultState = null\nconst modalReducer = (modals = defaultState, action) => {\n  switch(action.type) {\n    case \"MODAL_OPEN\": {\n      return { modalProps: action.payload }; //pass along received payload to the store\n    }\n\n    case \"MODAL_CLOSE\": {\n      return null; //clear the state\n    }\n\n    default:\n      return modals;\n  }\n} */\n\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer,\n  modalInfo: detailsReducer //modals: modalReducer\n  //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/reducers/index.js"],"names":["combineReducers","im","messages","name","content","initialForm","v1","v2","m","index","messageReducer","action","type","newMsg","formReducer","f","Object","assign","value","detailsReducer","modalInfo"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B,C,CAEA;;AAEA,MAAMC,EAAE,GAAG;AACRC,EAAAA,QAAQ,EAAE,CACX;AACIC,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADW,EAKX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GALW,EASX;AACID,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GATW,EAaX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAbW;AADF,CAAX;AAsBA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,EADc;AAElBC,EAAAA,EAAE,EAAE;AAFc,CAApB;AAKA,MAAMC,CAAC,GAAG;AACR;AACAC,EAAAA,KAAK,EAAE;AAFC,CAAV,C,CAMA;;AAEA,MAAMC,cAAc,GAAG,CAACR,QAAQ,GAAGD,EAAZ,EAAgBU,MAAhB,KAA2B;AAC/C;AACA,UAAQA,MAAM,CAACC,IAAf;AAGE,SAAK,eAAL;AACE;AACD,aAAO;AACL;AACAV,QAAAA,QAAQ,EAAE,CAAC,GAAGA,QAAQ,CAACA,QAAb,EAAuBS,MAAM,CAACE,MAA9B,CAFL,CAE4C;;AAF5C,OAAP;;AAKA;;;;;;;;;AAUD;AAAS,aAAOX,QAAP;AAAiB;AApB5B;;AAqBE;AACJ,CAxBD;;AA4BA,MAAMY,WAAW,GAAG,CAAEC,CAAC,GAAGV,WAAN,EAAmBM,MAAnB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AAEC,SAAK,aAAL;AACI;AACA,aAAOI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACzBT,QAAAA,EAAE,EAAEK,MAAM,CAACO;AADc,OAApB,CAAP;AAEK;;AAGT,SAAK,YAAL;AACG,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACxBR,QAAAA,EAAE,EAAEI,MAAM,CAACO;AADa,OAApB,CAAP;;AAID;AAAS,aAAOH,CAAP;AAdZ;AAiBA,CAlBD;;AAoBC,MAAMI,cAAc,GAAG,CAACC,SAAS,GAAGZ,CAAb,EAAgBG,MAAhB,KAA2B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAK,eAAL;AAEE,aAAOI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBG,SAAlB,EAA6B;AAClC;AACAX,QAAAA,KAAK,EAAEE,MAAM,CAACF;AAFoB,OAA7B,CAAP;;AAKF;AAAS,aAAOW,SAAP;AATX;AAWD,CAZA;AAcD;;;;;;;;;;;;;;;;;AAgBA,eAAepB,eAAe,CAAC;AAC7B;AACAE,EAAAA,QAAQ,EAAEQ,cAFmB;AAG7BK,EAAAA,CAAC,EAAED,WAH0B;AAI7BM,EAAAA,SAAS,EAAED,cAJkB,CAK9B;AAED;;AAP+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n//**initial state constants**\n\nconst im = {\n   messages: [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\"\n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\"\n  }\n]\n\n}\n \nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}\n\nconst m = {\n  //isShowing: false,\n  index: 0\n}\n\n\n//**Reducers** TODO: Might need to combine messageReducer into formReducer\n\nconst messageReducer = (messages = im, action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n   switch (action.type)\n   {\n\n     case \"HANDLE_SUBMIT\":\n       //adds the submitted message to the existing im\n      return {\n        //concat newMsg to array of messages\n        messages: [...messages.messages, action.newMsg], //spread attribute : ...\n      }\n\n      /* case \"HANDLE_TOGGLE\":\n        const isShowing = false;\n        const i = 0;\n        return {\n          isShowing: !action.isShowing, //makes it opposite of what it was\n          messages: action.messages.messages,\n          i: action.i\n        } */\n\n\n     default: return messages; //returns object of array of messages\n    }; \n};\n\n\n\nconst formReducer = ( f = initialForm, action) => {\n switch (action.type){\n    \n  case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({},f, {\n        v1: action.value\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\n    \n    \n  case \"HANDLE_MSG\":\n     return Object.assign({},f, {\n        v2: action.value\n      }); \n    \n    default: return f; \n }\n \n};\n\n const detailsReducer = (modalInfo = m, action) => {\n  switch (action.type){\n    //grab the index of the active message to display modal for\n    case \"HANDLE_TOGGLE\":\n      \n      return Object.assign({}, modalInfo, {\n        //isShowing: !action.isShowing, //might need to debug\n        index: action.index\n      });\n\n    default: return modalInfo;\n  }\n}; \n\n/* const defaultState = null\nconst modalReducer = (modals = defaultState, action) => {\n  switch(action.type) {\n    case \"MODAL_OPEN\": {\n      return { modalProps: action.payload }; //pass along received payload to the store\n    }\n\n    case \"MODAL_CLOSE\": {\n      return null; //clear the state\n    }\n\n    default:\n      return modals;\n  }\n} */\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messages: messageReducer,\n  f: formReducer,\n  modalInfo: detailsReducer\n //modals: modalReducer\n \n//anotherKey: anotherReducer //all your reducers should be combined\n}\n);\n\n"]},"metadata":{},"sourceType":"module"}