{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lydia\\\\OneDrive\\\\Documents\\\\UBC\\\\CPSC436I\\\\assignment_2\\\\src\\\\components\\\\MsgList.js\";\n//TODO EVERYTHING; template\nimport React, { useState, Fragment } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport DetailView from \"./DetailView\";\nimport useModal from \"./useModal\";\nimport { handleToggle } from '../actions';\nexport default function MsgList() {\n  //state: {\n  //     \n  //}\n  const dispatch = useDispatch();\n  /*\r\n  useState should be used only inside functional components. useState is the way if we need an internal state and don't need to implement more complex logic such as lifecycle methods.\r\n    const [state, setState] = useState(initialState);\r\n  Returns a stateful value, and a function to update it.\r\n    During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\r\n    The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\r\n   */\n\n  const listItems = useSelector(state => state.messages.messages); //first messages is im in messageReducer; .messages gives the array part of messages\n  //const [isShowing, setIsShowing] = useState(false);\n\n  const {\n    isShowing,\n    toggle\n  } = useModal();\n  /*cite: https://www.debuggr.io/react-map-of-undefined/ \r\n  undefined or null values are ignored inside JSX so it's safe to pass it on for first render\r\n  */\n  //helper callback function to dispatch toggle info tailored to every list item\n\n  const handle_Toggle = index => {\n    //setting the active message by id\n    dispatch(handleToggle(index));\n  }; //TODO: somehow load data into ims so the mapping starts\n\n\n  let msgsToRender;\n\n  if (listItems) {\n    msgsToRender = listItems.map((msg, i) => {\n      //iterate  and get the hook's default isShowing and toggle for each message\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"msg_send\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_username\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }\n      }, msg.name), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"msg_message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }, msg.content), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"detail_button\",\n        onClick: () => console.log(i)\n        /* onClick= {handle_Toggle} */\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }, \"Details\")))));\n    });\n  } else {\n    msgsToRender = \"Loading...\"; //TODO: FIX CURRENTLY ALWAYS UNDEFINED\n  } //TODO: get action to populate ul with lis\n\n\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"msg_list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, msgsToRender);\n}","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/components/MsgList.js"],"names":["React","useState","Fragment","useSelector","useDispatch","DetailView","useModal","handleToggle","MsgList","dispatch","listItems","state","messages","isShowing","toggle","handle_Toggle","index","msgsToRender","map","msg","i","name","content","console","log"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAwC,aAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,eAAe,SAASC,OAAT,GAAmB;AAC9B;AACA;AACA;AAGA,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA;;;;;;;;AAWA,QAAMM,SAAS,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,QAAN,CAAeA,QAAzB,CAA7B,CAnB8B,CAmBmC;AAGjE;;AACA,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAsBR,QAAQ,EAApC;AAIC;;;AAIA;;AACD,QAAMS,aAAa,GAAIC,KAAD,IAAW;AAC7B;AACAP,IAAAA,QAAQ,CAACF,YAAY,CAACS,KAAD,CAAb,CAAR;AAEH,GAJD,CAhC8B,CAsC7B;;;AACD,MAAIC,YAAJ;;AACA,MAAIP,SAAJ,EAAe;AACXO,IAAAA,YAAY,GAEXP,SAAS,CAACQ,GAAV,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC1B;AAEG,0BACI,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAGA,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEY;AAAI,QAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA;AAAK,QAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACR;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BD,GAAG,CAACE,IAAnC,CADQ,eAER;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8BF,GAAG,CAACG,OAAlC,CAFQ,eAGJ;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAmC,QAAA,OAAO,EAAI,MAAKC,OAAO,CAACC,GAAR,CAAYJ,CAAZ;AAAe;AAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHI,CADA,CADA,CAFZ,CADJ;AAeH,KAlBA,CAFD;AAqBH,GAtBD,MAsBM;AACFH,IAAAA,YAAY,GAAG,YAAf,CADE,CAC2B;AAChC,GAhE6B,CAmE7B;;;AAED,sBAEA;AAAI,IAAA,SAAS,EAAE,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSA,YADT,CAFA;AAOH","sourcesContent":["//TODO EVERYTHING; template\r\nimport React, { useState,Fragment } from 'react';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport DetailView from \"./DetailView\";\r\nimport useModal from \"./useModal\";\r\nimport { handleToggle } from '../actions';\r\n\r\nexport default function MsgList (){\r\n    //state: {\r\n    //     \r\n    //}\r\n\r\n\r\n    const dispatch = useDispatch();\r\n   \r\n    /*\r\n    useState should be used only inside functional components. useState is the way if we need an internal state and don't need to implement more complex logic such as lifecycle methods.\r\n\r\n    const [state, setState] = useState(initialState);\r\n    Returns a stateful value, and a function to update it.\r\n\r\n    During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).\r\n\r\n    The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\r\n     */\r\n    \r\n    const listItems = useSelector(state => state.messages.messages); //first messages is im in messageReducer; .messages gives the array part of messages\r\n    \r\n    \r\n    //const [isShowing, setIsShowing] = useState(false);\r\n    const {isShowing, toggle} = useModal();\r\n    \r\n    \r\n\r\n     /*cite: https://www.debuggr.io/react-map-of-undefined/ \r\n     undefined or null values are ignored inside JSX so it's safe to pass it on for first render\r\n     */\r\n\r\n     //helper callback function to dispatch toggle info tailored to every list item\r\n    const handle_Toggle = (index) => {\r\n        //setting the active message by id\r\n        dispatch(handleToggle(index));\r\n\r\n    }\r\n\r\n     //TODO: somehow load data into ims so the mapping starts\r\n    let msgsToRender;\r\n    if (listItems) {\r\n        msgsToRender =\r\n        \r\n         listItems.map((msg, i) => {\r\n         //iterate  and get the hook's default isShowing and toggle for each message\r\n            \r\n            return (\r\n                <Fragment key= {i}>\r\n                    {\r\n                            <li className=\"msg_send\">\r\n                            <div className=\"msg\">\r\n                            <div className =\"msg_content\">\r\n                    <div className=\"msg_username\">{msg.name}</div>\r\n                    <div className=\"msg_message\">{msg.content}</div>\r\n                        <button className=\"detail_button\"  onClick = {() =>console.log(i)}/* onClick= {handle_Toggle} */>Details</button>\r\n                            </div>\r\n                            </div>\r\n                        </li>   \r\n                    }\r\n                </Fragment>\r\n            )\r\n        })\r\n    }else {\r\n        msgsToRender = \"Loading...\"; //TODO: FIX CURRENTLY ALWAYS UNDEFINED\r\n    } \r\n\r\n\r\n     //TODO: get action to populate ul with lis\r\n     \r\n    return( \r\n    \r\n    <ul className= \"msg_list\"> \r\n            {msgsToRender}\r\n    </ul> \r\n    );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}