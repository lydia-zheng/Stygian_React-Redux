{"ast":null,"code":"import { combineReducers } from 'redux';\n\nconst messageReducer = (messageList = [{\n  name: \"Turtle\",\n  content: \"When did you change my username??\"\n}, {\n  name: \"Driz\",\n  content: \"Just now. Why?\"\n}, {\n  name: \"Turtle\",\n  content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n}, {\n  name: \"Driz\",\n  content: \"That we're all fictional? Yeah, no biggie.\"\n}], action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  if (action.type === 'ADD MESSAGES') {\n    return messageList; //TODO: do something with the form and message\n  }\n\n  return messageList; //TODO: might need to change messageList = im in parameter\n};\n\nconst values = Array(2).fill('');\n\nconst formReducer = (prev_values = values, action) => {\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\": //submit\n    //TODO\n\n    case \"HANDLE_USER\":\n      //typing in form input; FIXED!! Finally text shows up!!\n      return prev_values.v1 = action.value;\n    //THIS NEEDS TO KEEP TRACK OF INPUT\n    //TODO: add another handlechange for separate text input\n\n    case \"HANDLE_MSG\":\n      return prev_values.v2 = action.value;\n\n    default:\n      return prev_values;\n  }\n};\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  value: formReducer //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/reducers/index.js"],"names":["combineReducers","messageReducer","messageList","name","content","action","type","values","Array","fill","formReducer","prev_values","v1","value","v2"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B;;AAGC,MAAMC,cAAc,GAAG,CAAEC,WAAW,GAAG,CACtC;AACIC,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CADsC,EAKtC;AACID,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CALsC,EAStC;AACID,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CATsC,EAatC;AACID,EAAAA,IAAI,EAAE,MADV;AAEIC,EAAAA,OAAO,EAAE;AAFb,CAbsC,CAAhB,EAiBrBC,MAjBqB,KAiBV;AACX;AACF,MAAIA,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;AACnC,WAAOJ,WAAP,CADmC,CACf;AACpB;;AACD,SAAOA,WAAP,CALa,CAKO;AACpB,CAvBA;;AAyBD,MAAMK,MAAM,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,EAAd,CAAf;;AAEA,MAAMC,WAAW,GAAG,CAACC,WAAW,GAAGJ,MAAf,EAAuBF,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,eAAL,CADD,CAEK;AACA;;AAGJ,SAAK,aAAL;AACI;AACA,aAAOK,WAAW,CAACC,EAAZ,GAAiBP,MAAM,CAACQ,KAA/B;AAAsC;AAExC;;AACA,SAAK,YAAL;AACE,aAAOF,WAAW,CAACG,EAAZ,GAAiBT,MAAM,CAACQ,KAA/B;;AAEF;AAAS,aAAOF,WAAP;AAdZ;AAiBA,CAlBD;;AAoBA,eAAeX,eAAe,CAAC;AAC7B;AACAE,EAAAA,WAAW,EAAED,cAFgB;AAG7BY,EAAAA,KAAK,EAAEH,WAHsB,CAK/B;;AAL+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n\n const messageReducer = ( messageList = [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\"\n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\"\n  }\n], action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n\tif (action.type === 'ADD MESSAGES') {\n\t\treturn messageList; //TODO: do something with the form and message\n\t}\n\treturn messageList; //TODO: might need to change messageList = im in parameter\n};\n\nconst values = Array(2).fill('');\n\nconst formReducer = (prev_values = values, action) => {\n switch (action.type){\n  case \"HANDLE_SUBMIT\":\n      //submit\n      //TODO\n\n    \n  case \"HANDLE_USER\":\n      //typing in form input; FIXED!! Finally text shows up!!\n      return prev_values.v1 = action.value; //THIS NEEDS TO KEEP TRACK OF INPUT\n    \n    //TODO: add another handlechange for separate text input\n    case \"HANDLE_MSG\":\n      return prev_values.v2 = action.value;\n    \n    default: return prev_values; \n }\n \n};\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  value: formReducer\n \n//anotherKey: anotherReducer //all your reducers should be combined\n});\n\n"]},"metadata":{},"sourceType":"module"}