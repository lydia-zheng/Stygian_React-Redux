{"ast":null,"code":"import { combineReducers } from 'redux'; //**initial state constants**\n\nconst im = {\n  messages: [{\n    name: \"Turtle\",\n    content: \"When did you change my username??\"\n  }, {\n    name: \"Driz\",\n    content: \"Just now. Why?\"\n  }, {\n    name: \"Turtle\",\n    content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  }, {\n    name: \"Driz\",\n    content: \"That we're all fictional? Yeah, no biggie.\"\n  }]\n};\nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}; //**Reducers**\n\nconst messageReducer = (messageList = im, action) => {\n  //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n  switch (action.type) {\n    case \"INITIALIZE\":\n      return messageList;\n    //debug why it's not working  \n\n    case \"ADD_MESSAGES\":\n      break;\n\n    default:\n      return messageList;\n  }\n\n  ;\n};\n\nconst formReducer = (f = initialForm, action) => {\n  switch (action.type) {\n    case \"HANDLE_SUBMIT\":\n      //submit\n      break;\n    //TODO!!!! HOW TO ADD A MESSAGE\n\n    case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({}, f, {\n        v1: action.value\n      });\n    //THIS NEEDS TO KEEP TRACK OF INPUT\n\n    case \"HANDLE_MSG\":\n      return Object.assign({}, f, {\n        v2: action.value\n      });\n\n    default:\n      return f;\n  }\n};\n\nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  f: formReducer //anotherKey: anotherReducer //all your reducers should be combined\n\n});","map":{"version":3,"sources":["C:/Users/lydia/OneDrive/Documents/UBC/CPSC436I/assignment_2/src/reducers/index.js"],"names":["combineReducers","im","messages","name","content","initialForm","v1","v2","messageReducer","messageList","action","type","formReducer","f","Object","assign","value"],"mappings":"AAAA,SAAQA,eAAR,QAA+B,OAA/B,C,CAEA;;AAEA,MAAMC,EAAE,GAAG;AACRC,EAAAA,QAAQ,EAAE,CACX;AACIC,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GADW,EAKX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GALW,EASX;AACID,IAAAA,IAAI,EAAE,QADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GATW,EAaX;AACID,IAAAA,IAAI,EAAE,MADV;AAEIC,IAAAA,OAAO,EAAE;AAFb,GAbW;AADF,CAAX;AAsBA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,EAAE,EAAE,EADc;AAElBC,EAAAA,EAAE,EAAE;AAFc,CAApB,C,CAOA;;AAEA,MAAMC,cAAc,GAAG,CAAEC,WAAW,GAAGR,EAAhB,EAAoBS,MAApB,KAA+B;AACnD;AACA,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAK,YAAL;AACE,aAAOF,WAAP;AAAmB;;AAErB,SAAK,cAAL;AACE;;AACF;AAAS,aAAOA,WAAP;AAPX;;AAQK;AACP,CAXD;;AAeA,MAAMG,WAAW,GAAG,CAAEC,CAAC,GAAGR,WAAN,EAAmBK,MAAnB,KAA8B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,eAAL;AACI;AACA;AACA;;AAIJ,SAAK,aAAL;AACI;AACA,aAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACzBP,QAAAA,EAAE,EAAEI,MAAM,CAACM;AADc,OAApB,CAAP;AAEK;;AAGT,SAAK,YAAL;AACG,aAAOF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBF,CAAjB,EAAoB;AACxBN,QAAAA,EAAE,EAAEG,MAAM,CAACM;AADa,OAApB,CAAP;;AAID;AAAS,aAAOH,CAAP;AApBZ;AAuBA,CAxBD;;AA0BA,eAAeb,eAAe,CAAC;AAC7B;AACAS,EAAAA,WAAW,EAAED,cAFgB;AAG7BK,EAAAA,CAAC,EAAED,WAH0B,CAK/B;;AAL+B,CAAD,CAA9B","sourcesContent":["import {combineReducers } from 'redux';\n\n//**initial state constants**\n\nconst im = {\n   messages: [\n  {\n      name: \"Turtle\",\n      content: \"When did you change my username??\"\n  },\n  {\n      name: \"Driz\",\n      content: \"Just now. Why?\"\n  },\n  {\n      name: \"Turtle\",\n      content: \"Urg. Nevermind that, did you hear about the news? Apparently..\"\n  },\n  {\n      name: \"Driz\",\n      content: \"That we're all fictional? Yeah, no biggie.\"\n  }\n]\n\n}\n \nconst initialForm = {\n  v1: \"\",\n  v2: \"\"\n}\n\n\n\n//**Reducers**\n\nconst messageReducer = ( messageList = im, action) => {\n   //TODO: add more actions that reducer computes on; figure out if initialize_messages is correct\n   switch (action.type)\n   {\n     case \"INITIALIZE\":\n       return messageList;//debug why it's not working  \n\n     case \"ADD_MESSAGES\":\n       break;\n     default: return messageList;\n       }; \n};\n\n\n\nconst formReducer = ( f = initialForm, action) => {\n switch (action.type){\n  case \"HANDLE_SUBMIT\":\n      //submit\n      break;\n      //TODO!!!! HOW TO ADD A MESSAGE\n\n\n    \n  case \"HANDLE_USER\":\n      //creating a copy wiht object.assign(), not mutating the original state; assigns v1 to be action's value\n      return Object.assign({},f, {\n        v1: action.value\n      });  //THIS NEEDS TO KEEP TRACK OF INPUT\n    \n    \n  case \"HANDLE_MSG\":\n     return Object.assign({},f, {\n        v2: action.value\n      }); \n    \n    default: return f; \n }\n \n};\n \nexport default combineReducers({\n  //Todo: messageList not connected to rest action, state, etc\n  messageList: messageReducer,\n  f: formReducer\n \n//anotherKey: anotherReducer //all your reducers should be combined\n});\n\n"]},"metadata":{},"sourceType":"module"}